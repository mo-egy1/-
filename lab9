console app 19 اسمها 


using System;
using System.Collections.Generic;

namespace laba9
{
    class Program
    {
        

        static void Main(string[] args)
        {
            int[] Q = { 1, 2, 3, 4, 5, 6, 7 ,8 };
            Set s1 = new Set(Q);
            Set s2 = new Set();

        //    Console.WriteLine($"IndexOf: {set1.IndexOf(5)}");

            Set s3 = s1 + s2;
            
            Set s4 = s1 / s2;
            
            Set s5 = s1 * s2;

            Console.WriteLine("=======================");

            Console.WriteLine("s3:=  ");
            s3.ShowSet();




            Console.WriteLine("s4:=  ");
            s4.ShowSet();



            Console.WriteLine("s5:=  ");
            s5.ShowSet();
           



            Console.WriteLine("=======================");


            if (s3 < s5)
            {
                Console.WriteLine("yes" + " s3 < s5");

            }
            else
            {
                Console.WriteLine("No" +" " + "s3 not < s5");
            }


            Console.WriteLine("=======================");



            Console.WriteLine(s2[2]);
        }
    }

    public class Set
    {
        public int z;
        int[] arr;

        public Set()
        {
            Console.WriteLine("Enter the number of elements : ");
            z = Convert.ToInt32(Console.ReadLine());
            if (z< 0)
            {
                Console.WriteLine("Error!!! Enter another element:");
                return;
            }

            arr = Fill();
        }

        public Set(int[] a)
        {
            z = a.Length;
            arr = new int[z];
            for (int i = 0; i < z; i++) arr[i] = a[i];
        }


        public int[] Fill()
        {
            int[] a = new int[z];
            Dictionary<int, bool> d = new Dictionary<int, bool>();

            Console.WriteLine("Enter the elements set: ");
            for (int i = 0; i < z; i++)
            {
                a[i] = Convert.ToInt32(Console.ReadLine());

                while (d.ContainsKey(a[i]))
                {
                    Console.WriteLine("Enter another elements: ");
                    a[i] = Convert.ToInt32(Console.ReadLine());
                }

                d[a[i]] = true;
            }

            Array.Sort(a);
            return a;
        }

        public int indexOf(int Value)
        {
            int l = 0, r = z;

            while (r - l > 1)
            {
                int m = (l + r) / 2;
                if (arr[m] <= Value) l = m;
                else r = m;
            }

            if (arr[l] == Value) return l;
            return -1;

            Console.WriteLine("ELMINTS: =");
        }

        public void ShowSet()
        {
            for (int i = 0; i < z; i++)
            {
                Console.Write($"{arr[i]} ");
            }

            Console.WriteLine();
        }

        public void Add(int NewElement)
        {
            if (indexOf(NewElement) == -1)
            {
                Array.Resize(ref arr, z + 1);
                arr[z] = NewElement;
                z++;
            }
        }

        public static Set operator ++(Set set1) // عمليات التحميل ازائد
        {
            for (int i = 0; i < set1.z; i++)
            {
                set1.arr[i]++;
            }

            return set1;
        }

        public static Set operator +(Set set1, Set set2)
        {
            int[] a = new int[set1.arr.Length];
            int k = set1.arr.Length;

            for (int i = 0; i < set1.arr.Length; i++)
            {
                a[i] = set1.arr[i];
            }

            for (int i = 0; i < set2.arr.Length; i++)
            {
                bool flag = false;
                for (int j = 0; j < set1.arr.Length; j++)
                {
                    if (set1.arr[j] == set2.arr[i])
                    {
                        flag = true;
                        break;
                    }
                }

                if (!flag)
                {
                    Array.Resize(ref a, k + 1);
                    a[k] = set2.arr[i];
                    k++;
                }
            }

            var ans = new Set(a);
            return ans;
        }

        public static Set operator *(Set set1, Set set2)   ///3
        {
            int count = 0;
            int[] res = new int[0];

            for (int i = 0; i < set1.arr.Length; i++)
            {
                for (int j = 0; j < set2.arr.Length; j++)
                    if (set1.arr[i] == set2.arr[j])
                    {
                        Array.Resize(ref res, count + 1);
                        res[count] = set1.arr[i];
                        count++;
                        break;
                    }
            }

            var ans = new Set(res);
            return ans;
        }

        public static Set operator /(Set set1, Set set2) ////4
        {
            int elements = 0;
            int[] ele = new int[0];

            for (int i = 0; i < set1.arr.Length; i++)
            {
                bool flag = false;
                for (int j = 0; j < set2.arr.Length; j++)
                    if (set1.arr[i] == set2.arr[j])
                    {
                        flag = true; 
                        break;
                    }

                if (!flag)
                {
                    Array.Resize(ref ele, elements + 1);
                    ele[elements] = set1.arr[i];
                    elements++;
                }
            }

            var ans = new Set(ele);
            return ans;
        }

        public static bool operator <(Set set3, Set set5)
        {
            return set3.arr.Length < set5.arr.Length;
        }

        public static bool operator >(Set set3, Set set5)
        {
            return set3.arr.Length > set5.arr.Length;
        }

        public int this[int index]
        {
            get { return arr[index]; }
        }
    }
}
