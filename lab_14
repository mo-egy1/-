using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Timers;

namespace lab_14
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Doctor> Doc = new List<Doctor>();

            StreamReader sr = new StreamReader(@"D:\File\SaveDoctor.txt");
            


            for (int i =0; i <15; i++)
            {
                string info = sr.ReadLine();
                Doctor pers = new Doctor(info.Split(" ")[0], info.Split(" ")[1], Convert.ToInt32(info.Split(" ")[2]));
                Doc.Add(pers);
            }





            var hospitals = new List<Hospital>
            {
                new Hospital("Margarita","Dentist" ),
                new Hospital("Sergey ","Surgeon"),
                new Hospital("Zaretta","Orthopedic"),
                new Hospital("Angelina","Veterinary ")

            };

            Filtar(Doc);
            Projection(Doc);
            Sorted(Doc);
            Group(Doc);
            Agegate(Doc);
            Retricving(Doc);
            All(Doc);
            Any(Doc, hospitals);


        }

        static void Filtar(List<Doctor> Doc)
        {
            // هل هو اطباءعيون اواطباب اعصاب
            //офтальмологи
            // عرض الاطباء الي الخبرة بتاعتعم اقل من 9 سنين 
            var selectedDoctors = from doc in Doc
                                  where ((doc.Speciolo == "Ophthalmologists" || doc.Speciolo == "Neurologists") && doc.Experience <= 9)
                                  select doc;
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("***********************************");
           
            foreach (var dos in selectedDoctors)
            {
                
                Console.WriteLine($"{dos.Name} {dos.Speciolo}  {dos.Experience}");
                
            }
            Console.WriteLine();
            Console.WriteLine("***********************************");
        }






        static void Projection(List<Doctor> Doc)
        {
            // عرض الخبرة اقل من سنتين 
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine("***********************************");
            Console.WriteLine("Doctors with less than two years of experience:\n");

            var ProjectionDoctors = from doc in Doc
                                    where doc.Experience <= 2
                                    select doc;


            var item1 = from pr in ProjectionDoctors
                        select new
                        {
                            Nam = pr.Name,
                            Speciolo1 = pr.Speciolo,
                            Experienc = pr.Experience
                  
                        };
            
            foreach (var n in item1)
            {
                Console.WriteLine("{0}{1}{2}", n.Nam, n.Speciolo1, n.Experienc);
            }
            Console.WriteLine();
            Console.WriteLine("***********************************");

        }

        // الترتيب حسب الاسم و الخبرة 

        static void Sorted(List<Doctor> Doc)
        {
            var sortedDoctors = from doc in Doc
                                orderby doc.Name, doc.Experience
                                select doc;
            Console.ForegroundColor = ConsoleColor.Yellow;
            
            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.WriteLine("The Sorte:\n ");
            foreach(var so in sortedDoctors)
            {
                Console.WriteLine($"{so.Name} {so.Experience}");

            }
            Console.WriteLine();
            Console.WriteLine("***********************************");
        }
       


        static void Group(List<Doctor> Doc)
        {
            //التجميع حسب الخبرة
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine("***********************************");

            Console.WriteLine("Grouping by Experience: \n ");

            var groupDoctors = from doc in Doc
                               group doc by doc.Experience

                               into g
                               select new
                               {
                                   Name = g.Key,
                                   Count = g.Count(),
                                   unies = from u in g select u
                               };
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine("The Grouping");
            Console.WriteLine("\n");

            foreach (var group in groupDoctors)
            {
                Console.WriteLine($"{group.Name}: ");
                foreach (var unies in group.unies)
                {
                    Console.WriteLine($"{unies.Name}{unies.Speciolo}{unies.Experience}");
                }
                Console.WriteLine();    
            }
            Console.WriteLine("***********************************");

        }


        // عرض  حسب الحروف 
       public static void Agegate(List<Doctor> Doc)
        {
            Console.WriteLine();
            Console.ForegroundColor = ConsoleColor.Blue;

            int count = (from i in Doc
                         where (i.Name.ToUpper().StartsWith("A") || i.Name.ToUpper().StartsWith("D") || i.Name.ToUpper().StartsWith("I") || i.Name.ToUpper().StartsWith("N")
                         || i.Name.ToUpper().StartsWith("S"))
                         select i).Count();

            Console.WriteLine($"The names of doctors whose names begin with these letters: {count}");
        }

        static void Retricving(List<Doctor> Doc)
        {
            // الخبرة بتاعتهم لا تساوي 2 
            Console.WriteLine();

            Console.WriteLine("The Doctor that ther Experience not = 2 : ");

            var exper = Doc.TakeWhile(Doc => Doc.Experience != 2);

            foreach (Doctor k in exper)
            {
                Console.WriteLine($"{0} {1} {2}", k.Name, k.Speciolo, k.Experience);
            }
            Console.WriteLine();

            Console.WriteLine("***********************************");
        }

       
        // التاكد من وجدو جارح في القايمة 
        static void All(List<Doctor> Doc)
        {
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine("");

            bool result = Doc.All(u => u.Speciolo != "Surgeon");

            if (result)
            {
                Console.WriteLine("Yes there are Surgeon here");
            }
            else
            {
                Console.WriteLine("NO there is no Surgeon here");
            }
            Console.WriteLine("***********************************");
        }

        
        static void Any(List<Doctor> Doc , List<Hospital> hospitals)
        {
            Console.ForegroundColor = ConsoleColor.Red;

            var clank = from u in Doc
                        join hos in hospitals on u.Speciolo
          equals hos.Specioli
                        select new { Speciolo = u.Speciolo, NameDoc = u.Name, Namehos = hos.Name};

            foreach(var i in clank)
            {
                Console.WriteLine($"{i.Speciolo}: {i.NameDoc}: {i.Namehos}");
            }
            Console.ForegroundColor = ConsoleColor.Blue;

        }


            





    }
        




    class Doctor
    {
        public string Name { get; set; }
        // التخصص
        public string Speciolo { get; set; }
        // سنسن الخبرة
        public int Experience { get; set; }


        public Doctor(string name, string specioli, int experience)
        {
            Name = name;
            Speciolo = specioli;
            Experience = experience;
        } 

    }


    class Hospital
    {
        public string Name { get; set; }

        public string Specioli { get; set; }

        public Hospital(string name, string specioli)
        {
            Name = name;
            Specioli = specioli;
        }


    }
}
